package tasklist;

import ListInterface;

public class DoublyLinkedNodeList<T> extends Object implements ListInterface<T> {
	
	//instance variables
	private DoublyLinkedNode doublyLinkedList;  //reference to a doublyLinkedNode
	
	//constructor
	public DoublyLinkedNodeList() {
		super();
		doublyLinkedList = null;
	}

	@Override
	public void add(T item) {
		DoublyLinkedNode currentNode = new DoublyLinkedNode(item);
		if(doublyLinkedList == null) {
			doublyLinkedList = currentNode;
		}
		else {
			currentNode.setPreviousLink(doublyLinkedList);
			doublyLinkedList.setNextLink(currentNode);
			doublyLinkedList = currentNode;
		}
	}

	@Override
	public boolean remove(T item) {
		DoublyLinkedNode currentNode = locate(item);
		boolean removed = false;
		if(currentNode != null) { //the item is on the list
			if(currentNode == doublyLinkedList) {
				doublyLinkedList = doublyLinkedList.getPreviousLink();
				doublyLinkedList.setNextLink(null);
				removed = true;
			}
			else {
				DoublyLinkedNode previousNode = currentNode.getPreviousLink();
				DoublyLinkedNode nextNode = currentNode.getNextLink();
				if((previousNode != null)) {
					previousNode.setNextLink(nextNode);
				}
				nextNode.setPreviousLink(previousNode);
				removed = true;
			}
		}
		
		return removed;
	}

	@Override
	public boolean find(T item) {
		boolean found = false;
		DoublyLinkedNode currentNode = locate(item);
		if(currentNode != null) {
			found = true;
		}
		return found;
	}
	/**
	 * 
	 * locate should find the node that holds the item if that
	 * item exists in the list. If the item does exist, return
	 * the DoublyLinkedNode reference that holds the item,
	 * otherwise return null to represent that this item is 
	 * not on the list
	 */
	private DoublyLinkedNode locate(T item) {
		DoublyLinkedNode currentNode = doublyLinkedList;
		boolean found = false;
		while(!found && currentNode != null) {
			if(currentNode.getData().equals(item)) {
				found = true;
			}
			else {
				currentNode = currentNode.getPreviousLink();
			}
		}
		return currentNode;
	}
	/**
	 * returns all items in the list as a String
	 */
	public String toString() {
		String allItems = "";
		DoublyLinkedNode currentNode = doublyLinkedList;
		while(currentNode != null) {
			allItems += "\n" + currentNode.getData().toString();
			currentNode = currentNode.getPreviousLink();
		}
		return allItems;
	}
	/**
	 * DoublyLinkedNode is an inner class and an inner class is a class that exists
	 * inside of another class. This means that the DoublyLinkedNode class cannot
	 * be accessed outside of DoublyLinkedNodeBasedList. DoublyLinkedNodeBasedList has access
	 * to the public methods of DoublyLinkedNode because DoublyLinkedNode is an inner class of
	 * DoublyLinkedNodeBasedList. It is important to remember that DoublyLinkedNodeBasedList
	 * does not have direct access to private instance variables of 
	 * DoublyLinkedNode. Private means that those instance variables are not
	 * accessible outside of the DoublyLinkedNode class
	 */
	private class DoublyLinkedNode extends Object{
		//instance variables
		
		private T data;
		private DoublyLinkedNode previousLink;//reference to the previous link object
		private DoublyLinkedNode nextLink;//reference to the next link object
		
		//constructor
		public DoublyLinkedNode(T newData) {
			super();
			data = newData;
			previousLink = null;
			nextLink = null;
		}
		//non-static methods
		public void setData(T newData) {
			data = newData;
		}
		public T getData() {
			return data;
		}
		public void setPreviousLink(DoublyLinkedNode previousNode) {
			this.previousLink = previousNode;
		}
		public DoublyLinkedNode getPreviousLink() {
			return previousLink;
		}
		public void setNextLink(DoublyLinkedNode nextNode) {
			this.nextLink = nextNode;
		}
		public DoublyLinkedNode getNextLink() {
			return nextLink;
		}
	}
}
